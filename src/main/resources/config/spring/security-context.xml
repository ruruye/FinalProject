<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
   xmlns:security="http://www.springframework.org/schema/security"
   xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
<!-- xmlns:security : 스프링 시큐리티가 제공하는 XML 네임스페이스를 활성화 -->
	<bean id="customAccessDenied"
	 class="com.ddit.proj.security.CustomAccessDeniedHandler" ></bean>
	 
	<!-- 로그인 성공 처리
	로그인 성공 후 이력 로그를 기록(DB, 파일)과 같은 작업을 하고자 할 때 사용
	-->
	<bean id="customLoginSuccess" 
		class="com.ddit.proj.security.CustomLoginSuccessHandler"></bean>
		
	<!-- 사용자가 정의한 비밀번호 암호화 처리기를 빈(객체)으로 등록 -->
	<bean id="customPasswordEncoder" 
		class="com.ddit.proj.security.CustomNoOpPasswordEncoder"></bean>
		
	<!-- 스프링 시큐리티의 UserDetailsService를 구현한 클래스를 빈(객체)으로 등록 -->
	<bean id="customUserDetailsService"
		class="com.ddit.proj.security.CustomUserDetailsService"></bean>
  
	<security:http>
		<security:intercept-url pattern="/stu/**" access="hasRole('STUDENT')" />
		<security:intercept-url pattern="/prof/**" access="hasRole('PROFESSOR')" />
		<security:intercept-url pattern="/admin/**" access="hasRole('ADMIN')" />
		
		<!-- 폼 기반 인증 기능 사용 -->
		<security:form-login login-page="/security/login" authentication-success-handler-ref="customLoginSuccess" />
		
		<!--1. 접근 거부 처리(사용자 정의) -->
		<security:access-denied-handler ref="customAccessDenied" />
		
		<!-- 자동로그인
		로그인 하면 특정 시간 동안 다시 로그인 할 필요가 없는 기능.
		dataSource(root-context.xml)를 통해 지정한 데이터베이스의 약속된 테이블(PERSISTENT_LOGINS)을		
		이용하여 기존 로그인 정보를 기록함
		
		token-validity-seconds : 쿠키의 유효시간(초). 604800초는 7일
		 -->
		<security:remember-me data-source-ref="datasource" token-validity-seconds="604800"/>
		
		<!-- 로그아웃 처리. 로그아웃 후에 세션을 무효화 함 -->
		<security:logout logout-url="/logout" invalidate-session="true" delete-cookies="remember-me,JSESSION_ID" />
	</security:http>
	
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<!-- 사용자가 정의한 비밀번호 암호화 처리기를 지정함 -->
			<security:password-encoder ref="customPasswordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>
</beans>